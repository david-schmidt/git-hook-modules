#!/usr/bin/env node
var cmd = process.argv[2];

var helpMsg = function(){/*

Usage:
	git hooks <command>

Commands:
	run: `git hooks run <hook>`
		runs the hook commands for the provided hook.
		
	init: `git hooks init`
		forwards all git hooks to the git hooks run and creates a Hookfile if one is not present

	--version: `git hooks --version`
		prints out the currently running version of git hooks.

	-h: `git hooks -h`
		displays this help message

Hooks:
	applypatch-msg: description to come

	pre-applypatch: description to come

	post-applypatch: description to come

	pre-commit: description to come

	prepare-commit-msg: description to come

	commit-msg: description to come

	post-commit: description to come

	pre-rebase: description to come

	post-checkout: description to come

	post-merge: description to come

	pre-receive: description to come

	update: description to come

	post-receive: description to come

	post-update: description to come

	pre-auto-gc: description to come

	post-rewrite: description to come

	pre-push: description to come

*/}.toString().split(/\n/).slice(1, -1).join("\n");

if(cmd==="init"){
	var init = require("../cmds/init");
	init(process.cwd(), "git hooks run", function(err){
		if(err){
			throw err;
		}
	});
}
else if(cmd==="run"){
	var hook = process.argv[3];
	var args = process.argv.slice(4);
	var run = require("../cmds/run");
	run(hook, args);
}
else if(cmd=="--version"){
	var pj = require("../package.json");
	console.log(pj.version);
}
else if(cmd == undefined || cmd == "-h"){
	console.log(helpMsg);
}
else{
	console.log(cmd+" is not a valid git hooks command");
	process.exit(1);
}